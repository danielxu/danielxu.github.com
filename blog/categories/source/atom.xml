<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: source | CoreXDY'S Ben]]></title>
  <link href="http://danielxu.github.com/blog/categories/source/atom.xml" rel="self"/>
  <link href="http://danielxu.github.com/"/>
  <updated>2013-12-31T23:35:42+08:00</updated>
  <id>http://danielxu.github.com/</id>
  <author>
    <name><![CDATA[徐大雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[项目中使用git管理源码简单流程]]></title>
    <link href="http://danielxu.github.com/blog/2013/02/18/git-simple-workflow/"/>
    <updated>2013-02-18T10:32:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/02/18/git-simple-workflow</id>
    <content type="html"><![CDATA[<p>项目中使用git进行源代码管理的时候，正确的流程有利于问题的查找，代码分析。这里有一套简单的流程，应该普遍试用于大部分项目中的源代码管理。</p>

<h2>1、主分支Master</h2>

<p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>

<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>

<!--more-->


<p>其中第一次提交代码的时候最好使用</p>

<p>```bash</p>

<pre><code>git push -u origin master
</code></pre>

<p>```
<img src="/images/gitworkflow/master.png"></p>

<h2>2、开发分支Develop</h2>

<p>上面的主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>

<p>这个分支可以用来生成代码的 nightly 版本。如果想正式对外发布，就在Master分支上，对Develop分支进行 merge 。</p>

<p>Git创建Develop分支的命令：</p>

<p>```bash</p>

<pre><code>#创建工程分支
git checkout -b develop master
</code></pre>

<p>```
将Develop分支发布到Master分支的命令：</p>

<p>```bash</p>

<pre><code>#切换到Master分支
</code></pre>

<p>　 git checkout master
　 #对Develop分支进行合并
　 git merge --no-ff develop
```
这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。</p>

<p><img src="/images/gitworkflow/fast-farward_merge.png"></p>

<p>使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。</p>

<p><img src="/images/gitworkflow/no-ff_merge.png"></p>

<h2>3、临时性分支</h2>

<p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>

<p>```</p>

<pre><code>* 功能（feature）分支
* 预发布（release）分支
* 修补bug（fixbug）分支
</code></pre>

<p>```</p>

<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>

<h3>3.1、功能分支</h3>

<p>功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。功能分支的名字，可以采用feature-*的形式命名。</p>

<p><img src="/images/gitworkflow/feature-*.png"></p>

<p>创建一个功能分支：</p>

<p>```bash</p>

<pre><code>git checkout -b feature-x develop
</code></pre>

<p>```
其中x表示功能名称，如：feature-login</p>

<p>开发完成后，将功能分支合并到develop分支：</p>

<p>```bash</p>

<pre><code>git checkout develop
git merge --no-ff feature-x
</code></pre>

<p>```</p>

<p>删除feature分支：</p>

<p>```bash</p>

<pre><code>git branch -d feature-x
</code></pre>

<p>```</p>

<h3>3.2、预发布分支</h3>

<p>预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p>

<p>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>

<p>创建一个预发布分支：</p>

<p>```bash</p>

<pre><code>git checkout -b release-1.2 develop
</code></pre>

<p>```</p>

<p>确认没有问题后，合并到master分支：</p>

<p>```bash</p>

<pre><code>git checkout master
git merge --no-ff release-1.2

#对合并生成的新节点，做一个标签
git tag -a 1.2
</code></pre>

<p>```</p>

<p>再合并到develop分支：</p>

<p>```bash</p>

<pre><code>git checkout develop
git merge --no-ff release-1.2
</code></pre>

<p>```</p>

<p>最后，删除预发布分支：</p>

<p>```bash</p>

<pre><code>git branch -d release-1.2
</code></pre>

<p>```</p>

<h3>3.3、修补bug分支</h3>

<p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>

<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>

<p><img src="/images/gitworkflow/fixbug-*.png"></p>

<p>创建一个修补bug分支：</p>

<p>```bash</p>

<pre><code>git checkout -b fixbug-0.1 master
</code></pre>

<p>```</p>

<p>修补结束后，合并到master分支：</p>

<p>```bash</p>

<pre><code>git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1
</code></pre>

<p>```</p>

<p>再合并到develop分支：</p>

<p>```bash</p>

<pre><code>git checkout develop
git merge --no-ff fixbug-0.1
</code></pre>

<p>```</p>

<p>最后，删除"修补bug分支"：</p>

<p>```bash</p>

<pre><code>git branch -d fixbug-0.1
</code></pre>

<p>```</p>

<h2>剩下的就是改合并的合并，改删除的删除。细心检查。</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods来做iOS程序的包依赖管理]]></title>
    <link href="http://danielxu.github.com/blog/2013/01/17/use-cocoapods-manage-lib/"/>
    <updated>2013-01-17T17:50:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/01/17/use-cocoapods-manage-lib</id>
    <content type="html"><![CDATA[<p>自己也在使用cocoaPods进行项目的第三方类库进行管理，不过总是懒得记录下来。在此引用：<a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">唐巧：使用CocoaPods来做iOS程序的包依赖管理</a>做一下使用记录。</p>

<h2>CocoaPods简介</h2>

<p>CocoaPods是一个负责管理iOS项目中第三方开源代码的工具。<a href="http://cocoapods.org/">CocoaPods</a> <a href="https://github.com/CocoaPods/CocoaPods">项目的源码</a>在Github上管理。该项目开始于2011年8月12日，经过一年多的发展，现在已经超过1000次提交，并且持续保持活跃更新。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<!-- more -->


<h2>CocoaPods的安装和使用介绍</h2>

<h3>安装</h3>

<p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：
<code>bash
$ gem install cocoapods
$ pod setup
</code></p>

<h3>使用</h3>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<p><code>
platform :ios
pod 'JSONKit',       '~&gt; 1.4'
pod 'Reachability',  '~&gt; 3.0.0'
pod 'ASIHTTPRequest'
pod 'RegexKitLite'
</code></p>

<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：
<code>bash
cd "your project home"
pod install
</code></p>

<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<ol>
<li>使用CocoaPods生成的 <em>.xcworkspace 文件来打开工程，而不是以前的 </em>.xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次pod install命令。</li>
</ol>


<h3>查找第三方库</h3>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：</p>

<p>``` bash
$ pod search json</p>

<p>-> AnyJSON (0.0.1)
   Encode / Decode JSON by any means possible.
   - Homepage: https://github.com/mattt/AnyJSON
   - Source:   https://github.com/mattt/AnyJSON.git
   - Versions: 0.0.1 [master repo]</p>

<p>-> JSONKit (1.5pre)
   A Very High Performance Objective-C JSON Library.
   - Homepage: https://github.com/johnezang/JSONKit
   - Source:   git://github.com/johnezang/JSONKit.git
   - Versions: 1.5pre, 1.4 [master repo]</p>

<p>-> MTJSONDictionary (0.0.4)
   An NSDictionary category for when you're working with it converting to/from JSON. DEPRECATED, use MTJSONUtils
   instead.
   - Homepage: https://github.com/mysterioustrousers/MTJSONDictionary.git
   - Source:   https://github.com/mysterioustrousers/MTJSONDictionary.git
   - Versions: 0.0.4, 0.0.3, 0.0.2 [master repo]</p>

<p>-> MTJSONUtils (0.1.0)
   An NSObject category for working with JSON.
   - Homepage: https://github.com/mysterioustrousers/MTJSONUtils.git
   - Source:   https://github.com/mysterioustrousers/MTJSONUtils.git
   - Versions: 0.1.0, 0.0.1 [master repo]</p>

<p>-> SBJson (3.1.1)
   This library implements strict JSON parsing and generation in Objective-C.
   - Homepage: http://stig.github.com/json-framework/
   - Source:   https://github.com/stig/json-framework.git
   - Versions: 3.1.1, 3.1, 3.0.4, 2.2.3 [master repo]</p>

<p>-> TouchJSON (1.0)
   TouchJSON is an Objective-C based parser and generator for JSON encoded data.
   - Homepage: https://github.com/TouchCode/TouchJSON
   - Source:   https://github.com/TouchCode/TouchJSON.git
   - Versions: 1.0 [master repo]
```</p>

<h3>生成第三方库的帮助文档</h3>

<p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到XCode中，那么用brew安装appledoc即可：</p>

<p><code>bash
brew install appledoc
</code></p>

<p>关于appledoc，我在今年初的另一篇博客<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a>中有专门介绍。它最大的优点是可以将帮助文档集成到XCode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>

<h2>原理</h2>

<p>CocoaPods是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>

<ol>
<li>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</li>
<li>对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。</li>
<li>CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建基于github的博客]]></title>
    <link href="http://danielxu.github.com/blog/2013/01/06/setup-based-on-githubs-blog/"/>
    <updated>2013-01-06T10:56:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/01/06/setup-based-on-githubs-blog</id>
    <content type="html"><![CDATA[<p>原理：基于<a href="https://github.com/">github</a>的<a href="http://pages.github.com/">Pages</a>功能,使用基于github模式的博客管理工具<a href="http://octopress.org/">Octopress</a>生成个人的独立博客站点。</p>

<hr />

<h1>安装</h1>

<h2>安装rvm和ruby（基于Mac）</h2>

<p>安装rvm：</p>

<p><code>
bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></p>

<p>设置classpath:</p>

<p><code>
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></p>

<p>安装ruby:</p>

<p><code>
rvm install ruby-1.9.3-p194
rvm use ruby-1.9.3-p194
rvm gemset create octopress
rvm gemset use octopress
rvm rubygems latest
</code></p>

<p>有可能这3步都不需要。一般现在的Mac系统都自带ruby环境。一般在/usr/local/rvm和/usr/bin/ruby目录下面。</p>

<!--more-->


<h2>设置github账号</h2>

<ul>
<li><p>Github的账号注册地址是：<a href="https://github.com/signup/free">https://github.com/signup/free</a> 。申请好github账号后，建一个名为 username.github.com 的代码仓库。这里注意username必须是和你的账号名一致。
如：ceshi</p></li>
<li><p>配置ssh在终端里面输入</p></li>
</ul>


<p><code>
[[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa
</code></p>

<p>按照默认提示一路确认，生成密钥之后，将生成的信息复制到github页面中.</p>

<p><code>
[[ -f ~/.ssh/id_rsa.pub ]] &amp;&amp; cat ~/.ssh/id_rsa.pub
</code></p>

<p>然后在浏览器中打开页面：</p>

<p><a href="https://github.com/account/ssh">https://github.com/account/ssh</a></p>

<p>点击，Add another public key，粘贴前面步骤复制的信息，请格外注意，不要在Title中填写内容，直接将复制的内容粘贴到Key中，然后点击：Add Key即可。</p>

<h2>安装Octopress</h2>

<p>clone源码：</p>

<p><code>
git clone git://github.com/imathis/octopress.git ceshi.github.com
cd ceshi.github.com    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
git remote add ceshi git@github.com:ceshi/ceshi.github.com.git
</code></p>

<p>安装依赖：</p>

<p><code>
gem install bundler
bundle install
</code></p>

<p>安装Octopress：</p>

<p><code>
rake install
</code></p>

<h1>配置</h1>

<ul>
<li><p>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</p></li>
<li><p>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。</p></li>
</ul>


<h1>分享配置</h1>

<p>配置评论和分享到微博功能（接中国地气）</p>

<ul>
<li>在_config.yml中增加一项： weibo_share: true</li>
<li>修改 source/_includes/post/sharing.html ，增加：</li>
</ul>


<p>```html</p>

<h1>为了不和octopress系统冲突，这里加了注释，使用时将注释删掉即可</h1>

<p>// 下面的大括号的左括号{是全角的，如果复制，请自行改成半角
 ｛% if site.weibo_share %}</p>

<pre><code> ｛% include post/weibo.html %}
</code></pre>

<p> ｛% endif %}
```</p>

<ul>
<li>增加文件：source/_includes/post/weibo.html</li>
<li>访问 <a href="http://www.jiathis.com/">http://www.jiathis.com/</a> ，获取分享的代码,加入到weibo.html</li>
<li>访问 <a href="http://uyan.cc/">http://uyan.cc/</a> ，获得评论的代码,加入到weibo.html</li>
<li>获取代码的站点最好注册一下，可以统计分享、评论数据的</li>
</ul>


<h1>给文章添加版权信息</h1>

<ul>
<li>增加 source/_includes/post/copyright.htm，加入以下内容：</li>
</ul>


<p><code>html
原创&amp;amp;整理的文章，版权声明:自由转载-非商用&amp;amp;衍生-保持署名 | &lt;a herf="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"&gt;Creative Commons BY-NC-ND 3.0&lt;/a&gt;
</code></p>

<ul>
<li>修改 source/_layouts/post.html，在<footer>标签下增加如下代码：</li>
</ul>


<p>```html
// 下面的大括号的左括号{是全角的，如果复制，请自行改成半角
<footer></p>

<pre><code>&lt;p class="meta"&gt;
  ……省略代码
  ｛% include post/categories.html %}
&lt;/p&gt;
&lt;!--这里是增加的 --&gt;
&lt;p class="meta"&gt;
    ｛% include post/copyright.html %}
&lt;/p&gt;
&lt;!--这里是增加的 --&gt;
｛% unless page.sharing == false %}
  ｛% include post/sharing.html %}
｛% endunless %}
……省略代码
</code></pre>

<p>  </footer>
```</p>

<h1>写微博的方法</h1>

<p><a href="http://octopress.org/docs/blogging/">这里</a>有详细介绍：</p>

<p><code>bash
rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可
rake generate 生成静态文件
</code></p>

<p>配置octopress与github的连接：</p>

<p><code>
rake setup_github_pages #然后输入上面的git站点地址，如：git@github.com:ceshi/ceshi.github.com.git，这个配置只执行一次就可以了
</code></p>

<p>发布：</p>

<p><code>
rake watch 检测文件变化，实时生成新内容
rake preview 在本机4000端口生成访问内容
rake deploy 发布文件
</code></p>

<p>第一次运行时，会询问是否建立对github的授权，输入：yes。</p>

<p>再创建一个新的github的source分支，用于保存写作的md源文件等。</p>

<p><code>
git add .
git commit -m "some changes"
git push ceshi source
</code></p>

<p>可以到你的站点看看效果了：http://ceshi.github.com</p>

<h1>Mac OS X 10.9 Mavericks</h1>

<p>如果需要使用 <code>rvm</code> 更新，安装 ruby新版本，有可能需要重新验证环境</p>

<p><code>
rvm requirements
</code></p>

<p>如果中间出现什么其他的错误，可以使用<code>brew install xxx</code>安装缺少的依赖组件</p>

<h1>参考</h1>

<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">devtang</a></li>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">yangzhiping</a></li>
<li><a href="http://pages.github.com/">github pages</a></li>
<li><a href="http://octopress.org/docs/blogging/">octopress blog</a></li>
<li><a href="http://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac/">moncefbelyamani</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
