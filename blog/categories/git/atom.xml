<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | 个人博客]]></title>
  <link href="http://danielxu.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://danielxu.github.com/"/>
  <updated>2013-11-30T17:59:12+08:00</updated>
  <id>http://danielxu.github.com/</id>
  <author>
    <name><![CDATA[徐大雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Mac上给git安装P4Merge]]></title>
    <link href="http://danielxu.github.com/blog/2013/11/29/git-on-mac-to-install-p4merge/"/>
    <updated>2013-11-29T22:49:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/11/29/git-on-mac-to-install-p4merge</id>
    <content type="html"><![CDATA[<p>在使用Git作为源代码管理工具的时候，进行多人协作总会遇到合拼代码冲突的情况，如果靠人工一个文件一个文件的查找处理，将是多么麻烦的一件事情。所幸有免费的处理工具<a href="http://www.perforce.com/downloads/Perforce-Software-Version-Management/complete_list/Customer">P4Merge</a>,收费的就不说了。</p>

<p>P4Merge是一个Git版本库下的一个代码合并工具。免费，简单。</p>

<h2>安装</h2>

<p>双击下载回来的 P4V.dmg，将 p4merge 拖入到 Applications 文件夹内</p>

<!--more-->


<h2>配置</h2>

<h3>创建运行脚本</h3>

<p>创建2个p4merge命令行运行的脚本，如下：</p>

<h4>p4merge</h4>

<p><code>bash
sudo vi /usr/local/bin/p4merge
</code></p>

<p>将下面的复制到p4merge文件中,保存</p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>/Applications/p4merge.app/Contents/MacOS/p4merge $*
```</p>

<h4>p4diff</h4>

<p><code>bash
sudo vi /usr/local/bin/p4diff
</code></p>

<p>将下面的复制到p4diff文件中,保存</p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>[ $# -eq 7 ] &amp;&amp; /usr/local/bin/p4merge "$2" "$PWD/$5"
```</p>

<h4>修改运行权限</h4>

<p><code>bash
$ sudo chmod +x /usr/local/bin/p4merge   
$ sudo chmod +x /usr/local/bin/p4diff
</code></p>

<h3>配置GIT</h3>

<p><code>bash
vi ~/.gitconfig
</code>
增加如下的p4merge配置，保存。</p>

<p>```
[merge]</p>

<pre><code>tool = p4merge
keepBackup = false
</code></pre>

<p>[mergetool "p4merge"]</p>

<pre><code>cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
keepTemporaries = false
trustExitCode = false
keepBackup = false
</code></pre>

<p>[diff]</p>

<pre><code>external = p4diff
</code></pre>

<p>```</p>

<p>在进行版本合并的时候，如果出现不能自动merge的情况，就可以使用<code>git mergetool</code> 或者 <code>git diff</code>处理你的代码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目中使用git管理源码简单流程]]></title>
    <link href="http://danielxu.github.com/blog/2013/02/18/git-simple-workflow/"/>
    <updated>2013-02-18T10:32:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/02/18/git-simple-workflow</id>
    <content type="html"><![CDATA[<p>项目中使用git进行源代码管理的时候，正确的流程有利于问题的查找，代码分析。这里有一套简单的流程，应该普遍试用于大部分项目中的源代码管理。</p>

<h2>1、主分支Master</h2>

<p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>

<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>

<!--more-->


<p>其中第一次提交代码的时候最好使用</p>

<p>```bash</p>

<pre><code>git push -u origin master
</code></pre>

<p>```
<img src="/images/gitworkflow/master.png"></p>

<h2>2、开发分支Develop</h2>

<p>上面的主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>

<p>这个分支可以用来生成代码的 nightly 版本。如果想正式对外发布，就在Master分支上，对Develop分支进行 merge 。</p>

<p>Git创建Develop分支的命令：</p>

<p>```bash</p>

<pre><code>#创建工程分支
git checkout -b develop master
</code></pre>

<p>```
将Develop分支发布到Master分支的命令：</p>

<p>```bash</p>

<pre><code>#切换到Master分支
</code></pre>

<p>　 git checkout master
　 #对Develop分支进行合并
　 git merge --no-ff develop
```
这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。</p>

<p><img src="/images/gitworkflow/fast-farward_merge.png"></p>

<p>使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。</p>

<p><img src="/images/gitworkflow/no-ff_merge.png"></p>

<h2>3、临时性分支</h2>

<p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>

<p>```</p>

<pre><code>* 功能（feature）分支
* 预发布（release）分支
* 修补bug（fixbug）分支
</code></pre>

<p>```</p>

<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>

<h3>3.1、功能分支</h3>

<p>功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。功能分支的名字，可以采用feature-*的形式命名。</p>

<p><img src="/images/gitworkflow/feature-*.png"></p>

<p>创建一个功能分支：</p>

<p>```bash</p>

<pre><code>git checkout -b feature-x develop
</code></pre>

<p>```
其中x表示功能名称，如：feature-login</p>

<p>开发完成后，将功能分支合并到develop分支：</p>

<p>```bash</p>

<pre><code>git checkout develop
git merge --no-ff feature-x
</code></pre>

<p>```</p>

<p>删除feature分支：</p>

<p>```bash</p>

<pre><code>git branch -d feature-x
</code></pre>

<p>```</p>

<h3>3.2、预发布分支</h3>

<p>预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p>

<p>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>

<p>创建一个预发布分支：</p>

<p>```bash</p>

<pre><code>git checkout -b release-1.2 develop
</code></pre>

<p>```</p>

<p>确认没有问题后，合并到master分支：</p>

<p>```bash</p>

<pre><code>git checkout master
git merge --no-ff release-1.2

#对合并生成的新节点，做一个标签
git tag -a 1.2
</code></pre>

<p>```</p>

<p>再合并到develop分支：</p>

<p>```bash</p>

<pre><code>git checkout develop
git merge --no-ff release-1.2
</code></pre>

<p>```</p>

<p>最后，删除预发布分支：</p>

<p>```bash</p>

<pre><code>git branch -d release-1.2
</code></pre>

<p>```</p>

<h3>3.3、修补bug分支</h3>

<p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>

<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>

<p><img src="/images/gitworkflow/fixbug-*.png"></p>

<p>创建一个修补bug分支：</p>

<p>```bash</p>

<pre><code>git checkout -b fixbug-0.1 master
</code></pre>

<p>```</p>

<p>修补结束后，合并到master分支：</p>

<p>```bash</p>

<pre><code>git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1
</code></pre>

<p>```</p>

<p>再合并到develop分支：</p>

<p>```bash</p>

<pre><code>git checkout develop
git merge --no-ff fixbug-0.1
</code></pre>

<p>```</p>

<p>最后，删除"修补bug分支"：</p>

<p>```bash</p>

<pre><code>git branch -d fixbug-0.1
</code></pre>

<p>```</p>

<h2>剩下的就是改合并的合并，改删除的删除。细心检查。</h2>
]]></content>
  </entry>
  
</feed>
