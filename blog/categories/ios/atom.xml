<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | CoreXDY'S Ben]]></title>
  <link href="http://danielxu.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://danielxu.github.com/"/>
  <updated>2013-12-31T23:25:55+08:00</updated>
  <id>http://danielxu.github.com/</id>
  <author>
    <name><![CDATA[徐大雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[查看Xocde编译优化后的图片(PNG)]]></title>
    <link href="http://danielxu.github.com/blog/2013/05/02/ios-optimizations-image/"/>
    <updated>2013-05-02T14:00:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/05/02/ios-optimizations-image</id>
    <content type="html"><![CDATA[<p>Xcode开发工具，在编译APP的时候，会把APP内配图（PNG）进行优化。优化的动作是由pngcrush工具完成的，而优化后的图片文件是不能直接查看。</p>

<p>那么如果想查看这样优化过后的图片，就需要使用pngcrush撤销这些图片的优化。下面是命令：</p>

<p><code>bash
xudayu@DayuXu:Test.app/$ for file in `ls | grep png`; do /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush -revert-iphone-optimizations -q $file ~/Desktop/img/$file;done;
</code></p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS界面设计切图小结]]></title>
    <link href="http://danielxu.github.com/blog/2013/04/12/ios-ui-design/"/>
    <updated>2013-04-12T11:24:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/04/12/ios-ui-design</id>
    <content type="html"><![CDATA[<h2>1.基本尺寸</h2>

<h3>（1）界面</h3>

<p><img src="/images/uidesign/iOS_ui_design_1.png"></p>

<p>实际设计时按：</p>

<ul>
<li>iPhone4、4s：640px*960px</li>
<li>iPhone5:  640px*1136px</li>
<li>iPad：1536px*2048px</li>
</ul>


<h3>(2) 图标：</h3>

<ul>
<li>1024px*1024px  圆角180px</li>
<li>提交1024px*1024px 方角 png格式图片</li>
</ul>


<!--more-->


<h2>2.图形部件及字体</h2>

<h3>（1） 为显示清晰</h3>

<ul>
<li>所有图形部件尺寸必须为偶数</li>
<li>样式中阴影、发光、描边的数值也必须为偶数</li>
</ul>


<h3>（2） 为方便用户点击</h3>

<ul>
<li>所有可点击的部件需大于88px*88px</li>
<li>若图片本身不够，可在切图时补足空白像素
例如：<img src="/images/uidesign/iOS_ui_design_2.png"></li>
</ul>


<h3>（3）为减小程序体积</h3>

<p>建议尽量使用可平铺图案设计界面</p>

<h3>（4）苹果默认字体</h3>

<p>在pc上没有完全一样的字体，Hiragino Sans GB苹果丽黑最相近
一般做效果图时，用Hiragino Sans GB（包括中英文）代替即可，也可以用方正黑体代替</p>

<ul>
<li>所有字体使用偶数字号进行设计</li>
<li>苹果丽黑有W3、W6两种粗细的字体</li>
</ul>


<p><img src="/images/uidesign/iOS_ui_design_3.png"></p>

<p>附下载地址：<a href="http://www.iplaysoft.com/hiragino-sans.html">苹果丽黑</a></p>

<h3>（5）系统可以做到如下字体效果</h3>

<p><img src="/images/uidesign/iOS_ui_design_4.png"></p>

<p>即，向特定方向1px（做效果图时做2px的效果）投影，需给出字体颜色、阴影颜色。
一般不建议按钮上的文字做特殊效果。如果必要， 需将字体和按钮一起切图。</p>

<h3>（6）导航栏中的文字一般为40点W6</h3>

<p><img src="/images/uidesign/iOS_ui_design_5.png"></p>

<h2>3.切图提示</h2>

<h3>(1）所有切图必须为偶数</h3>

<p>先根据Retina屏幕切图（即640<em>960/640</em>1136/1536*2048），后将切图缩为普通屏幕尺寸。
（有特殊图片需要单独制作）</p>

<h3>（2）可平铺部件切图时可如下图：</h3>

<p><img src="/images/uidesign/iOS_ui_design_6.png"></p>

<p>带圆角按钮切图时可如下图</p>

<p><img src="/images/uidesign/iOS_ui_design_7.png"></p>

<p>同理</p>

<p><img src="/images/uidesign/iOS_ui_design_8.png"></p>

<p>并在效果图中标出具体大小</p>

<p>标注软件推荐：<a href="http://www.appinn.com/dorado/">dorado</a></p>

<h3>（3）导航栏和标签栏下的阴影程序可以自动生成，可不切，如图：</h3>

<p><img src="/images/uidesign/iOS_ui_design_9.png"></p>

<p><img src="/images/uidesign/iOS_ui_design_10.png"></p>

<p>若不满意默认阴影效果，可以单独切2px宽的阴影，如图：</p>

<p><img src="/images/uidesign/iOS_ui_design_11.png"></p>

<p>如有异形阴影如：</p>

<p><img src="/images/uidesign/iOS_ui_design_12.png"></p>

<p>需切整条阴影，并与攻城师说明。</p>

<h3>（4）所有按钮需有两种状态——正常状态和按下状态</h3>

<h3>（6）一般情况下切图格式为png24</h3>

<ul>
<li>若个别图片jpg比png小很多，可用jpg</li>
<li>但欢迎页、icon必须为png，在不影响显示效果的前提下，可以考虑用png8</li>
</ul>


<h2>4.命名</h2>

<h3>（1）图片命名后缀</h3>

<ul>
<li><p>根据Retina屏幕的切图文件名后加@2x，普通屏幕尺寸不用加。</p></li>
<li><p>欢迎页、背景等需要对iPhone5另外切图的文件名后加-568h@2x</p></li>
</ul>


<h3>（2）命名建议</h3>

<p>建议采用如下方法命名，如：</p>

<p><code>
切图性质_功能相关描述_图片描述（可无）_状态说明（可无）@2x.png
</code></p>

<p>用例:</p>

<ul>
<li>Retina屏幕切图</li>
</ul>


<p><code>
bg_booksnum_pressed@2x.png
ico_arrow_blue@2x.png
btn_blue_pressed@2x.png
pic_books_blue@2x.png
bg_main-568h@2x.png
</code></p>

<ul>
<li>普通屏幕切图</li>
</ul>


<p><code>
​bg_booksnum_pressed.png
ico_arrow_blue.png
btn_blue_pressed.png
pic_books_blue.png
按下状态切图命名后加_pressed
</code>
* 另外贴个建议命名备忘</p>

<p><img src="/images/uidesign/iOS_ui_design_13.png"></p>

<h2>参考</h2>

<ul>
<li><a href="/files/uidesign/iOS_UI_design_1.pdf">iOS交互设计指南翻译</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html">iOS设计指南·官方</a></li>
<li><a href="http://iconhandbook.co.uk/reference/chart/">iconhandbook</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppStore启用“短”连接服务]]></title>
    <link href="http://danielxu.github.com/blog/2013/02/05/appstore-short-url/"/>
    <updated>2013-02-05T09:57:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/02/05/appstore-short-url</id>
    <content type="html"><![CDATA[<p><strong><a href="https://developer.apple.com/library/ios/#qa/qa1633/_index.html">苹果官网开发者频道</a>,公布了最新启用的、更容易记忆的简短链接地址。为软件开发者们在宣传自己的产品是，使用更容易记忆的下载地址。</strong></p>

<!--more-->


<h2>规则如下：</h2>

<h3>开发商主页</h3>

<ul>
<li>iOS：http://appstore.com/&lt;公司名>，比如，http://appstore.com/沪江网</li>
<li>Mac：http://appstore.com/mac/&lt;公司名>，比如，http://appstore.com/mac/沪江网</li>
</ul>


<h3>应用下载地址</h3>

<ul>
<li>iOS：http://appstore.com/&lt;应用名>，比如，http://appstore.com/开心词场·超爽型背单词工具</li>
<li>Mac：http://appstore.com/mac/&lt;应用名>，比如，http://appstore.com/mac/Xcode</li>
</ul>


<h3>开发商旗下 App</h3>

<ul>
<li>iOS：http://appstore.com/&lt;公司名>/&lt;应用名>，比如，http://appstore.com/沪江网/沪江小D-多语种词典</li>
<li>Mac：http://appstore.com/mac/&lt;公司名>/&lt;应用名>，比如，http://appstore.com/mac/Apple/OSXMountainLion</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods来做iOS程序的包依赖管理]]></title>
    <link href="http://danielxu.github.com/blog/2013/01/17/use-cocoapods-manage-lib/"/>
    <updated>2013-01-17T17:50:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/01/17/use-cocoapods-manage-lib</id>
    <content type="html"><![CDATA[<p>自己也在使用cocoaPods进行项目的第三方类库进行管理，不过总是懒得记录下来。在此引用：<a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">唐巧：使用CocoaPods来做iOS程序的包依赖管理</a>做一下使用记录。</p>

<h2>CocoaPods简介</h2>

<p>CocoaPods是一个负责管理iOS项目中第三方开源代码的工具。<a href="http://cocoapods.org/">CocoaPods</a> <a href="https://github.com/CocoaPods/CocoaPods">项目的源码</a>在Github上管理。该项目开始于2011年8月12日，经过一年多的发展，现在已经超过1000次提交，并且持续保持活跃更新。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<!-- more -->


<h2>CocoaPods的安装和使用介绍</h2>

<h3>安装</h3>

<p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：
<code>bash
$ gem install cocoapods
$ pod setup
</code></p>

<h3>使用</h3>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<p><code>
platform :ios
pod 'JSONKit',       '~&gt; 1.4'
pod 'Reachability',  '~&gt; 3.0.0'
pod 'ASIHTTPRequest'
pod 'RegexKitLite'
</code></p>

<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：
<code>bash
cd "your project home"
pod install
</code></p>

<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<ol>
<li>使用CocoaPods生成的 <em>.xcworkspace 文件来打开工程，而不是以前的 </em>.xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次pod install命令。</li>
</ol>


<h3>查找第三方库</h3>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：</p>

<p>``` bash
$ pod search json</p>

<p>-> AnyJSON (0.0.1)
   Encode / Decode JSON by any means possible.
   - Homepage: https://github.com/mattt/AnyJSON
   - Source:   https://github.com/mattt/AnyJSON.git
   - Versions: 0.0.1 [master repo]</p>

<p>-> JSONKit (1.5pre)
   A Very High Performance Objective-C JSON Library.
   - Homepage: https://github.com/johnezang/JSONKit
   - Source:   git://github.com/johnezang/JSONKit.git
   - Versions: 1.5pre, 1.4 [master repo]</p>

<p>-> MTJSONDictionary (0.0.4)
   An NSDictionary category for when you're working with it converting to/from JSON. DEPRECATED, use MTJSONUtils
   instead.
   - Homepage: https://github.com/mysterioustrousers/MTJSONDictionary.git
   - Source:   https://github.com/mysterioustrousers/MTJSONDictionary.git
   - Versions: 0.0.4, 0.0.3, 0.0.2 [master repo]</p>

<p>-> MTJSONUtils (0.1.0)
   An NSObject category for working with JSON.
   - Homepage: https://github.com/mysterioustrousers/MTJSONUtils.git
   - Source:   https://github.com/mysterioustrousers/MTJSONUtils.git
   - Versions: 0.1.0, 0.0.1 [master repo]</p>

<p>-> SBJson (3.1.1)
   This library implements strict JSON parsing and generation in Objective-C.
   - Homepage: http://stig.github.com/json-framework/
   - Source:   https://github.com/stig/json-framework.git
   - Versions: 3.1.1, 3.1, 3.0.4, 2.2.3 [master repo]</p>

<p>-> TouchJSON (1.0)
   TouchJSON is an Objective-C based parser and generator for JSON encoded data.
   - Homepage: https://github.com/TouchCode/TouchJSON
   - Source:   https://github.com/TouchCode/TouchJSON.git
   - Versions: 1.0 [master repo]
```</p>

<h3>生成第三方库的帮助文档</h3>

<p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到XCode中，那么用brew安装appledoc即可：</p>

<p><code>bash
brew install appledoc
</code></p>

<p>关于appledoc，我在今年初的另一篇博客<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a>中有专门介绍。它最大的优点是可以将帮助文档集成到XCode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>

<h2>原理</h2>

<p>CocoaPods是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>

<ol>
<li>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</li>
<li>对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。</li>
<li>CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用内付费(IAP)开发步骤列表]]></title>
    <link href="http://danielxu.github.com/blog/2013/01/17/use-iap/"/>
    <updated>2013-01-17T17:45:00+08:00</updated>
    <id>http://danielxu.github.com/blog/2013/01/17/use-iap</id>
    <content type="html"><![CDATA[<p>由于项目可以需要用到内支付，在此引用<a href="http://blog.devtang.com/blog/2012/12/09/in-app-purchase-check-list/">唐巧：iOS应用内付费(IAP)开发步骤列表</a>，步骤清楚，以待备用。</p>

<hr />

<p>应用内付费（以下简称IAP, In app purchase）的开发工作。步骤繁多，在此把开发步骤列表整理如下。因为只是步骤列表，所以并不含详细的说明教程，需要看教程的新手，可以看我附在最后的一些参考链接。</p>

<!-- more -->


<h3>配置Developer.apple.com</h3>

<p>登录到<a href="https://developer.apple.com/">Developer.apple.com</a>，然后进行以下步骤：</p>

<ol>
<li>为应用建立建立一个不带通配符的App ID</li>
<li>用该App ID生成和安装相应的Provisioning Profile文件。</li>
</ol>


<h3>配置iTunes Connect</h3>

<p>登录到<a href="https://itunesconnect.apple.com/">iTunes Connet</a>，然后进行以下步骤：</p>

<ol>
<li>用该App ID创建一个新的应用。</li>
<li><p>在该应用中，创建应用内付费项目，选择付费类型，通常可选的是可重复消费(Consumable)的或是永久有效(Non-Consumable)的2种，然后设置好价格和Product ID以及购买介绍和截图即可，这里的Product ID是需要记住的，后面开发的时候需要。如下图所示：
<img src="/images/iap/iap-add-product-id.png"></p></li>
<li><p>添加一个用于在sandbox付费的测试用户，如下图所示。注意苹果对该测试用户的密码要求
和正式账号一样，必须是至少8位，并且同时包含数字和大小写字母：
<img src="/images/iap/iap-adduser-1.png">
<img src="/images/iap/iap-adduser-2.png"></p></li>
<li><p>填写相关的税务，银行，联系人信息。如下图所示：
<img src="/images/iap/iap-tax-info.png"></p></li>
</ol>


<h3>开发工作(ios端)</h3>

<p>1、 在工程中引入 storekit.framework 和 #import &lt;StoreKit/StoreKit.h></p>

<p>2、 获得所有的付费Product ID列表。这个可以用常量存储在本地，也可以由自己的服务器返回。</p>

<p>3、 制作一个界面，展示所有的应用内付费项目。这些应用内付费项目的价格和介绍信息可以是自己的服务器返回。但如果是不带服务器的单机游戏应用或工具类应用，则可以通过向App Store查询获得。我在测试时发现，向App Store查询速度非常慢，通常需要2-3秒钟，所以不建议这么做，最好还是搞个自己的服务器吧。</p>

<p>4、当用户点击了一个IAP项目，我们先查询用户是否允许应用内付费，如果不允许则不用进行以下步骤了。代码如下：
``` objc</p>

<pre><code>if ([SKPaymentQueue canMakePayments]) {
    // 执行下面提到的第5步：
    [self getProductInfo];
} else {
    NSLog(@"失败，用户禁止应用内付费购买.");
}
</code></pre>

<p>```</p>

<p>5、 我们先通过该IAP的ProductID向AppStore查询，获得SKPayment实例，然后通过SKPaymentQueue的 addPayment方法发起一个购买的操作。
``` objc
// 下面的ProductId应该是事先在itunesConnect中添加好的，已存在的付费项目。否则查询会失败。
- (void)getProductInfo {</p>

<pre><code>NSSet * set = [NSSet setWithArray:@[@"ProductId"]];
SKProductsRequest * request = [[SKProductsRequest alloc] initWithProductIdentifiers:set];
request.delegate = self;
[request start];
</code></pre>

<p>}</p>

<p>// 以上查询的回调函数
- (void)productsRequest:(SKProductsRequest <em>)request didReceiveResponse:(SKProductsResponse </em>)response {</p>

<pre><code>NSArray *myProduct = response.products;
if (myProduct.count == 0) {
    NSLog(@"无法获取产品信息，购买失败。");
    return;
}
SKPayment * payment = [SKPayment paymentWithProduct:myProduct[0]];
[[SKPaymentQueue defaultQueue] addPayment:payment];
</code></pre>

<p>}
```</p>

<p>6、 在viewDidLoad方法中，将购买页面设置成购买的Observer。
``` objc
- (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];
// 监听购买结果
[[SKPaymentQueue defaultQueue] addTransactionObserver:self];
</code></pre>

<p>}</p>

<ul>
<li>(void)viewDidUnload {
  [super viewDidUnload];
  [[SKPaymentQueue defaultQueue] removeTransactionObserver:self];
}
```</li>
</ul>


<p>7、 当用户购买的操作有结果时，就会触发下面的回调函数，相应进行处理即可。
``` objc
- (void)paymentQueue:(SKPaymentQueue <em>)queue updatedTransactions:(NSArray </em>)transactions {</p>

<pre><code>for (SKPaymentTransaction *transaction in transactions)
{
    switch (transaction.transactionState)
    {
        case SKPaymentTransactionStatePurchased://交易完成
            NSLog(@"transactionIdentifier = %@", transaction.transactionIdentifier);
            [self completeTransaction:transaction];
            break;
        case SKPaymentTransactionStateFailed://交易失败
            [self failedTransaction:transaction];
            break;
        case SKPaymentTransactionStateRestored://已经购买过该商品
            [self restoreTransaction:transaction];
            break;
        case SKPaymentTransactionStatePurchasing:      //商品添加进列表
            NSLog(@"商品添加进列表");
            break;
        default:
            break;
    }
}
</code></pre>

<p>}</p>

<ul>
<li>(void)completeTransaction:(SKPaymentTransaction *)transaction {
  // Your application should implement these two methods.
  NSString * productIdentifier = transaction.payment.productIdentifier;
  NSString * receipt = [transaction.transactionReceipt base64EncodedString];
  if ([productIdentifier length] > 0) {

<pre><code>  // 向自己的服务器验证购买凭证
</code></pre>

<p>  }</p>

<p>  // Remove the transaction from the payment queue.
  [[SKPaymentQueue defaultQueue] finishTransaction: transaction];</p></li>
</ul>


<p>}</p>

<ul>
<li><p>(void)failedTransaction:(SKPaymentTransaction *)transaction {
  if(transaction.error.code != SKErrorPaymentCancelled) {</p>

<pre><code>  NSLog(@"购买失败");
</code></pre>

  } else {

<pre><code>  NSLog(@"用户取消交易");
</code></pre>

<p>  }
  [[SKPaymentQueue defaultQueue] finishTransaction: transaction];
}</p></li>
<li><p>(void)restoreTransaction:(SKPaymentTransaction *)transaction {
  // 对于已购商品，处理恢复购买的逻辑
  [[SKPaymentQueue defaultQueue] finishTransaction: transaction];
}</p></li>
</ul>


<p>```</p>

<p>8、服务器验证凭证(Optional)。如果购买成功，我们需要将凭证发送到服务器上进行验证。考虑到网络异常情况，iOS端的发送凭证操作应该进行持久化，如果程序退出，崩溃或网络异常，可以恢复重试。</p>

<h3>开发工作(服务端)</h3>

<p>服务端的工作比较简单，分4步：</p>

<ol>
<li>接收ios端发过来的购买凭证。</li>
<li>判断凭证是否已经存在或验证过，然后存储该凭证。</li>
<li>将该凭证发送到苹果的服务器验证，并将验证结果返回给客户端。</li>
<li>如果需要，修改用户相应的会员权限。</li>
</ol>


<p>考虑到网络异常情况，服务器的验证应该是一个可恢复的队列，如果网络失败了，应该进行重试。</p>

<p>与苹果的验证接口文档在<a href="https://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/StoreKitGuide/VerifyingStoreReceipts/VerifyingStoreReceipts.html#//apple_ref/doc/uid/TP40008267-CH104-SW3">这里</a>。简单来说就是将该购买凭证用Base64编码，然后POST给苹果的验证服务器，苹果将验证结果以JSON形式返回。</p>

<p>苹果AppStore线上的购买凭证验证地址是<a href="https://buy.itunes.apple.com/verifyReceipt">https://buy.itunes.apple.com/verifyReceipt</a> ，测试的验证地址是：<a href="https://sandbox.itunes.apple.com/verifyReceipt">https://sandbox.itunes.apple.com/verifyReceipt</a></p>

<h2>参考链接</h2>

<p>以下参考链接详细说明了完成应用内付费开发的步骤：</p>

<ol>
<li><a href="https://developer.apple.com/appstore/in-app-purchase/index.html">https://developer.apple.com/appstore/in-app-purchase/index.html</a></li>
<li><a href="http://www.himigame.com/iphone-cocos2d/550.html">http://www.himigame.com/iphone-cocos2d/550.html</a></li>
<li><a href="http://www.cocoachina.com/iphonedev/sdk/2011/1028/3435.html">http://www.cocoachina.com/iphonedev/sdk/2011/1028/3435.html</a></li>
<li><a href="http://www.cocoachina.com/newbie/basic/2012/0214/3976.html">http://www.cocoachina.com/newbie/basic/2012/0214/3976.html</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
